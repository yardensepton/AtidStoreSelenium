package testPack;

// Generated by Selenium IDE
import org.junit.Test;
import org.junit.internal.TextListener;
import org.junit.runner.JUnitCore;
import org.junit.Before;
import org.junit.After;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.JavascriptExecutor;

import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.logging.log4j.*;

public class AddingProduct {
	private WebDriver driver;
	private Map<String, Object> vars;
	private Logger logger;
	private String baseUrl = "https://atid.store/";
	JavascriptExecutor js;
	private final int AMOUNT_MAX = 10;
	private final int AMOUNT_MIN = 1;

	@Before
	public void setUp() {

		driver = new ChromeDriver();
		js = (JavascriptExecutor) driver;
		vars = new HashMap<String, Object>();
		logger = LogManager.getLogger(SwitchPages.class);
	}

	@After
	public void tearDown() {
		// driver.quit();
	}

	@Test
  public void runTest() throws InterruptedException {
      // Open the Atid Store website
      driver.get("https://atid.store/store/");
      driver.manage().window().setSize(new Dimension(1024, 670));

		logger.info("---------------------ADD PRODUCT TEST---------------------");

      // Log information about opening the first store page
      logger.info("Opening the first store page - GOOD");
      
      Random rand = new Random();

     
      String cart = "cart-2/";      
     
      
      List<WebElement> productList = driver.findElements(By.cssSelector("ul.products li.product"));
      Map<String, String> productDetailsMap = new HashMap<String, String>();

      // Iterate through each product in the first page
      for (WebElement product : productList) {
    	    WebElement priceElement = product.findElement(By.cssSelector(".woocommerce-Price-amount"));
    	    
    	    // Check if there is a sale price
    	    List<WebElement> saleElements = product.findElements(By.cssSelector(".price ins .woocommerce-Price-amount"));

    	    if (!saleElements.isEmpty()) {
    	        // Sale price found, use the sale price
    	        priceElement = saleElements.get(0);
    	    }

    	    String productPrice = extractNumber(priceElement.getText().trim());
    	    String productLink = product.findElement(By.cssSelector("a.woocommerce-LoopProduct-link")).getAttribute("href");
    	    productDetailsMap.put(productLink, productPrice);
    	}

      
      for (Map.Entry<String, String> entry : productDetailsMap.entrySet()) {
          String productLink = entry.getKey();
          String productPrice = entry.getValue();

          
          driver.get(productLink);
          List<WebElement> outOfStockElement = driver.findElements(By.className("stock"));
          List<WebElement> inputButtons = driver.findElements(By.className("input-text"));
          if (!outOfStockElement.isEmpty() && !inputButtons.isEmpty()) {
        	  logger.info("Product is out of stock and can be added to cart - BAD");
          }else if (outOfStockElement.isEmpty()) {
        	  int amount = rand.nextInt(15) + 1;
        	  for (WebElement inputButton : inputButtons) {
        	      inputButton.clear();
        	      inputButton.sendKeys(Integer.toString(amount));
        	  }

        	  driver.findElement(By.className("single_add_to_cart_button")).click();
        	  List<WebElement> addedToCartAlertButton = driver.findElements(By.xpath("//*[@id=\"main\"]/div/div[1]/div/a"));
          
        // Check if the amount is not valid and the alert button is present
        	  if (!addedToCartAlertButton.isEmpty()) {
        		  if (amount < AMOUNT_MIN || amount > AMOUNT_MAX) {
        			  logger.info("Product "+ extractProductName(productLink)+ " was added  " + amount + " times - BAD");
        			  driver.get(baseUrl.concat(cart));
        			  driver.findElement(By.className("remove")).click();
        			  logger.info("-------------------------------");
        			 
        		  }else {
        			  logger.info("Product "+ extractProductName(productLink)+ " was added  " + amount + " times - GOOD");
        			  driver.get(baseUrl.concat(cart));

        			  List<WebElement> subtotalElements = driver.findElements(By.cssSelector(".product-subtotal"));
    
                      String subtotalText = subtotalElements.get(1).getText();
                      String extractedSubtotal = extractNumber(subtotalText);
                     
                      Double productPriceDouble = Double.valueOf(productPrice);
          			  Double priceShownInCartDouble = Double.valueOf(extractedSubtotal);
          			logger.info("product price is " + productPriceDouble+  ", price in the cart is "+ priceShownInCartDouble);
          			  
          			  Thread.sleep(1000);
          			  if(productPriceDouble * amount == priceShownInCartDouble) {
          			  		logger.info("price in the cart matches product price - GOOD");
          			  }else {
          			  	logger.info("price in the cart doesn't match product price - BAD");
          			  	}
          			  
          			driver.findElement(By.className("remove")).click();
          			
          			logger.info("-------------------------------");

        		  }
        	  
    
  
        	  }
          }
      }
      }

	private static String extractNumber(String input) {
		// Define a regular expression pattern for extracting numbers with commas and
		// periods
		String regex = "(\\d{1,3}(,\\d{3})*(\\.\\d+)?)|\\d+";

		// Use a regular expression to match the pattern
		Pattern pattern = Pattern.compile(regex);
		Matcher matcher = pattern.matcher(input);

		// Find the first match
		if (matcher.find()) {
			return matcher.group().replace(",", ""); // Remove commas
		}

		// If no match is found, return an empty string
		return "";
	}


	public static String extractProductName(String url) {
		return url.replaceAll(".*/product/(.*?)/.*", "$1");
	}

	public static void main(String args[]) {
		JUnitCore junit = new JUnitCore();
		junit.addListener(new TextListener(System.out));
		org.junit.runner.Result result = junit.run(AddingProduct.class); 
		
		if (result.getFailureCount() > 0) {
			System.out.println("Test failed.");
			System.exit(1);
		} else {
			System.out.println("Test finished successfully.");
			System.exit(0);
		}
	}
}
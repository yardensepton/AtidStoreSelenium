package testPack;

// Generated by Selenium IDE
import org.junit.Test;
import org.junit.internal.TextListener;
import org.junit.runner.JUnitCore;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Wait;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.text.Element;

import java.net.MalformedURLException;
import java.net.URL;
import java.time.Duration;

import org.apache.logging.log4j.*;

public class AddingProduct {
  private WebDriver driver;
  private Map<String, Object> vars;
  private Logger logger;
  private String baseUrl = "https://atid.store/";
  JavascriptExecutor js;
  @Before
  public void setUp() {
   
	//System.setProperty("webdriver.chrome.driver"
		//	,"C:\\Users\\acer\\Downloads\\chromedriver_win32\\chromedriver.exe");
    driver = new ChromeDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
    logger=LogManager.getLogger(SanityTest.class);
  }
  @After
  public void tearDown() {
 // driver.quit();
  }

  
  
  @Test
  public void runTest() throws InterruptedException {
      // Open the Atid Store website
      driver.get("https://atid.store/store/");
      driver.manage().window().setSize(new Dimension(1024, 670));

      // Log information about opening the first store page
      logger.info("Opening the first store page - GOOD");
      
      WebElement unorderedList = driver.findElement(By.className("page-numbers"));
      List<WebElement> listItems = unorderedList.findElements(By.tagName("li"));
      ArrayList<String>pageNames = new ArrayList<String>();
      Random rand = new Random();

     
      String cart = "cart-2/";      
     
     
      List<WebElement> inputUppButton = driver.findElements(By.xpath("//*[@id=\"quantity_65f0153852a15\"]/following-sibling::button[contains(@class, 'qty-increase')]"));
      List<WebElement> inputDownButton = driver.findElements(By.xpath("//*[@id=\"quantity_65f0153852a15\"]/following-sibling::button[contains(@class, 'qty-decrease')]\r\n"
      		+ ""));
            
      
      List<WebElement> productList = driver.findElements(By.cssSelector("ul.products li.product"));
      Map<String, String> productDetailsMap = new HashMap<String, String>();

      // Iterate through each product
      for (WebElement product : productList) {
    	    WebElement priceElement = product.findElement(By.cssSelector(".woocommerce-Price-amount"));
    	    
    	    // Check if there is a sale price
    	    List<WebElement> saleElements = product.findElements(By.cssSelector(".price ins .woocommerce-Price-amount"));

    	    if (!saleElements.isEmpty()) {
    	        // Sale price found, use the sale price
    	        priceElement = saleElements.get(0);
    	    }

    	    String productPrice = extractNumber(priceElement.getText().trim());
    	    String productLink = product.findElement(By.cssSelector("a.woocommerce-LoopProduct-link")).getAttribute("href");
    	    productDetailsMap.put(productLink, productPrice);
    	}

      
      for (Map.Entry<String, String> entry : productDetailsMap.entrySet()) {
          String productLink = entry.getKey();
          String productPrice = entry.getValue();

          
          driver.get(productLink);
          List<WebElement> outOfStockElement = driver.findElements(By.className("stock"));
          List<WebElement> inputButtons = driver.findElements(By.className("input-text"));
          if (!outOfStockElement.isEmpty() && !inputButtons.isEmpty()) {
        	  logger.info("Product is out of stock and can be added to cart - BAD");
          }else if (outOfStockElement.isEmpty()) {
        	  int amount = rand.nextInt(15) + 1;
        	  
//        	   Iterate through each input button if there are multiple
        	  for (WebElement inputButton : inputButtons) {
                inputButton.clear();
                inputButton.sendKeys(Integer.toString(amount));
            }
        	  driver.findElement(By.className("single_add_to_cart_button")).click();
        	  List<WebElement> addedToCartAlertButton = driver.findElements(By.xpath("//*[@id=\"main\"]/div/div[1]/div/a"));
          
        // Check if the amount is not valid and the alert button is present
        	  if (!addedToCartAlertButton.isEmpty()) {
        		  if (amount < 1 || amount > 10) {
        			  logger.info("Product "+ productLink+ " was added  " + amount + " times - BAD");
        			  driver.get(baseUrl.concat(cart));
        			  driver.findElement(By.className("remove")).click();
        			 
        		  }else {
        			  logger.info("Product "+ productLink+ " was added  " + amount + " times - GOOD");
        			  driver.get(baseUrl.concat(cart));

        			  List<WebElement> subtotalElements = driver.findElements(By.cssSelector(".product-subtotal"));
    
                      String subtotalText = subtotalElements.get(1).getText();
                      String extractedSubtotal = extractNumber(subtotalText);
                     
                      Double productPriceDouble = Double.valueOf(productPrice);
          			  Double priceShownInCartDouble = Double.valueOf(extractedSubtotal);
          			  
          			  Thread.sleep(1000);
          			  if(productPriceDouble * amount == priceShownInCartDouble) {
          			  		logger.info("price in the cart matches product price - GOOD");
          			  	}
          			  
          			driver.findElement(By.className("remove")).click();
          			
        			  

        		  }
        	  }
          }
      }
  }
      
  
  
  
  private static String extractNumber(String input) {
      // Define a regular expression pattern for extracting numbers with commas and periods
      String regex = "(\\d{1,3}(,\\d{3})*(\\.\\d+)?)|\\d+";

      // Use a regular expression to match the pattern
      Pattern pattern = Pattern.compile(regex);
      Matcher matcher = pattern.matcher(input);

      // Find the first match
      if (matcher.find()) {
          return matcher.group().replace(",", ""); // Remove commas
      }

      // If no match is found, return an empty string or handle accordingly
      return "";
  }
public static void main(String args[]) {
	  JUnitCore junit = new JUnitCore();
	  junit.addListener(new TextListener(System.out));
	  org.junit.runner.Result result = junit.run(AddingProduct.class); // Replace "SampleTest" with the name of your class
	  if (result.getFailureCount() > 0) {
	    System.out.println("Test failed.");
	    System.exit(1);
	  } else {
	    System.out.println("Test finished successfully.");
	    System.exit(0);
	  }
	}
}